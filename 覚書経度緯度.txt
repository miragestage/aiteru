26.32458019870399
127.78565053068849

緯度

緯度は簡単。北極と南極で考えれば良いので単純に地球の半径が使える。
地球 - Wikipediaから引用して地球の半径は6378150m。これをrとする。

円周の長さは2\pi rで求められるので、

2*\pi*6378150 = 40,054,782 (m)

ということで1度は

40054782 / 360 = 111,263.283 (m)

0.1 = 11,126.32m
0.01 = 1,112.63m
0.001 = 111.26m
0.0001 = 11.12m
0.00001 = 1.11m

経度

赤道上だと緯度と同じ計算でOKだけど、緯度が高くなるにつれ半径は小さくなっていく。北極点だと0。

求めたい地点の球体の切断面の半径を考える。地球の半径をR、切断面の半径をrとすると
r = Rcos\theta

あとは緯度と同様に円周出して1秒の距離を計算するだけ。東京（北緯35度)で考えると、
6378150 * cos(35/180*\pi) * 2 * \pi / (360 * 60 * 60) = 25.3219892 (m)



緯度

地球の半径は 6,356.752km として計算をする

地球の円周を求める。

円周 ＝ 2πr
＝ 2 × 3.1415926535897932384 × 6356752
＝ 39940650.767784450696367770503897
≒ 39940650.7678 (m)

となる。


1度あたりの距離を求める。

1度あたりの距離 ＝ 円周 ÷ 360
＝ 39940650.7678 ÷ 360
＝ 110946.25213277777777777777777778
≒ 110946.2521 (m)

キロメートルで表すと約111kmとなる


1秒あたりの距離を求める。

1秒当たりの距離 ＝ 円周 ÷ (360 × 60 × 60)
＝ 30.818403370216049382716049382716
≒ 30.8184 (m)


1秒を度に変換する。

1秒あたりの度 ＝ 1 ÷ 60 ÷ 60
＝ 0.00027777777777777777777777777777778
≒ 0.000277778 (度)

よって

0.00027778度ずらすと約30.8184mずれることになる。



経度

経度は緯度と違い測定する地点によって距離が異なります。

今回東京(北緯35度)を基に計算をしてみる。


東京を地点とし、円周を求める。

円周 ＝ 半径 × cos(北緯 ÷ 180 × π) × 2π
＝ 6356752 × cos(35 ÷ 180 × 3.1415926535897932384) × 2 × 3.1415926535897932384
＝ 6356752 × cos(0.61086523819801535192329176897101) × 2 × 3.1415926535897932384
＝ 6356752 × 0.81915204428899 × 2 × 3.1415926535897932384
＝ 5207146.39583812576048 × 2 × 3.1415926535897932384
＝ 32717465.7266632508040765244558
≒ 32717465.7267 (m)

となる。

ここからは緯度の計算と同じ方法で行う。

1度あたりの距離を求める。

1度あたりの距離 ＝ 円周 ÷ 360
＝ 32717465.7267 ÷ 360
＝ 90881.849240833333333333333333333
≒ 90881.8492 (m)

キロメートルで表すと約91kmとなる


1秒あたりの距離を求める。

1秒当たりの距離 ＝ 円周 ÷ (360 × 60 × 60)
＝ 25.244958122453703703703703703704
≒ 25.2450 (m)


1秒を度に変換する。

1秒あたりの度 ＝ 1 ÷ 60 ÷ 60
＝ 0.00027777777777777777777777777777778
≒ 0.000277778 (度)

よって

0.00027778度ずらすと約25.2450mずれることになる。




データベースから半径500m以内のデータを取得する


基準とする緯度・経度を以下とする

緯度：35.71654578
経度：139.777254


範囲を指定するために、基準の緯度経度に500m足した緯度経度と500mマイナスした緯度経度を求める。
※このやり方だと大体500mの距離内にあるものを取得することができるが正確なデータは取得できない。


500m足した緯度・経度を求める

緯度(500mプラス) ＝ 基準の緯度 + (範囲 ÷ 1秒当たりの緯度 × 1秒当たりの度)
＝ 35.71654578 + (500 ÷ 30.8184 × 0.000277778)
＝ 35.721052470808088674298471043273
≒ 35.72105247

経度(500mプラス) ＝ 基準の経度 + (範囲 ÷ 1秒当たりの緯度 × 1秒当たりの度)
＝ 139.777254 + (500 ÷ 25.2450 × 0.000277778)
＝ 139.78275564388987918399683105565
≒ 139.782756


次に500mマイナスした緯度・経度を求める

緯度(500mマイナス) ＝ 基準の緯度 – (範囲 ÷ 1秒当たりの緯度 × 1秒当たりの度)
＝ 35.71654578 – (500 ÷ 30.8184 × 0.000277778)
＝ 35.712039056743763465981361783869
≒ 35.71203906

経度(500mマイナス) ＝ 基準の経度 – (範囲 ÷ 1秒当たりの緯度 × 1秒当たりの度)
＝ 139.777254 – (500 ÷ 25.2450 × 0.000277778)
＝ 139.77175235611012081600316894435
≒ 139.771752


緯度の範囲は 35.71203906 ～ 35.72105247
経度の範囲は 139.771752 ～ 139.782756

となる


この範囲を利用してSQLを作成する

まずこの範囲のデータを取得するSQLを作成する。

1
2
3
4
5
6
SELECT
  id, jis_prefecture_code, prefecture, city_code, city, area_code, area, lat, lng, geom
FROM
  geos
WHERE
  MBRContains(GeomFromText('LineString(139.782756 35.72105247, 139.771752 35.71203906)'), geom)


上記のSQLで500m範囲内のデータを取得することができます。



次に基準の緯度・経度から範囲内の各データまでの距離を計算するSQLを作成する。


1
2
3
4
5
SELECT
  id, jis_prefecture_code, prefecture, city_code, city, area_code, area, lat, lng, geom,
  GLength(GeomFromText(CONCAT('LineString(35.71654578 139.777254,', lat, ' ', lng,')'))) AS distance
FROM
  geos


これで基準の緯度・経度から各データの緯度・経度までの距離を取得することができました。




500m範囲内のデータを取得するものと距離を出すものを組み合わせてみたSQLが以下のSQLです。

1
2
3
4
5
6
7
SELECT
  id, jis_prefecture_code, prefecture, city_code, city, area_code, area, lat, lng, geom,
  GLength(GeomFromText(CONCAT('LineString(35.71654578 139.777254,', lat, ' ', lng,')'))) AS distance
FROM
  geos
WHERE
  MBRContains(GeomFromText('LineString(139.782756 35.72105247, 139.771752 35.71203906)'), geom)


ただ、この実行結果には500m以内のものだけではなく567mのデータも取得されていますので、精度を上げたい場合はもっと別の方法を考えないといけないです。



位置情報をmysqlなどのRDBMS上に保持して、2点間の距離を求めたり、ユーザの現在地とデータベース上にある位置データとの距離を求めるときにSQLで何とかしようという話です。
まず2点間の距離は、三平方の定理を使うと
a^2 + b^2 = c^2（cが斜辺）
ということのようです。ただし地球は丸いので直線での公式とは違うため、長い距離になるとずれるようですが、その辺りは誤差として無視することとします。
そしてWikipediaから平均で緯度1度あたり111km、経度1度あたり91kmということなので、距離は
距離(km) = √((緯度1 – 緯度2) / 0.0111)^2 + ( (経度1 – 経度2) / 0.0091)^2
で求められるということになります。
mysqlのSQLで書くと下記のようになります。
SELECT SQRT(POWER((緯度1 – 緯度2) / 0.0111, 2) + POWER((経度1 – 経度2) / 0.0091, 2)) AS distance
渋谷駅(35.658482,139.701441)と新宿駅(35.690224,139.700089)の距離を求めると、
[code]
mysql> SELECT SQRT(POWER((35.658482 - 35.690224) / 0.0111, 2) + power((139.701441 - 139.70008) / 0.0091, 2)) AS distance;
+------------------+
| distance |
+------------------+
| 2.86354800792301 |
+------------------+
1 row in set (0.01 sec)
[/code]
2.8kmくらいになりました。これでデータと現在地の距離を求めて近い順に出すとかがSQLでできてしまいます。例えば下記のような雰囲気で。
[code]
SELECT SQRT(POWER((現在地緯度 - lat) / 0.0111, 2) + power((現在地経度 - lng) / 0.0091, 2)) AS distance FROM geodata ORDER BY distance

